import java.util.*;

public class S0928MinimizeMalwareSpreadII {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        HashMap<Integer, List<Integer>> infection = new HashMap();
        for (int i = 0; i < initial.length; i++) {
            boolean[] visited = new boolean[graph.length];
            for (int ini : initial) {
                visited[ini] = true;
            }

            Queue<Integer> bfs = new LinkedList<>();
            bfs.offer(initial[i]);
            while (!bfs.isEmpty()) {
                int t = bfs.poll();
                for (int adj = 0; adj < graph.length; adj++) {
                    if (graph[t][adj] == 0) {
                        continue;
                    }
                    if (!visited[adj]) {
                        visited[adj] = true;
                        bfs.offer(adj);
                        infection.putIfAbsent(adj, new ArrayList<>());
                        infection.get(adj).add(initial[i]);
                    }
                }
            }
        }

        int[] cnt = new int[graph.length];
        for (int i : infection.keySet()) {
            if (infection.get(i).size() == 1) {
                int t = infection.get(i).get(0);
                cnt[t]++;
            }
        }

        int m = cnt[initial[0]];
        int res = initial[0];
        for (int i = 0; i < graph.length; i++) {
            if (cnt[i] > m) {
                m = cnt[i];
                res = i;
            }
        }
        return res;
    }
}
