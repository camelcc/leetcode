import java.util.Arrays;
import java.util.LinkedList;

public class S0924MinimizeMalwareSpread {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        int N = graph.length;
        int[] infection = new int[N];
        Arrays.fill(infection, -1);
        int[] cnt = new int[N];
        for (int i = 0; i < initial.length; i++) {
            int n = initial[i];
            if (infection[n] != -1) {
                cnt[infection[n]] = 0;
                continue;
            }

            boolean[] visited = new boolean[N];
            bfs(graph, n, visited);
            int c = 0;
            for (int t = 0; t < N; t++) {
                if (visited[t]) {
                    c++;
                    infection[t] = n;
                }
            }
            cnt[n] = c;
        }
        int res = 0;
        for (int i = 1; i < initial.length; i++) {
            if (cnt[initial[i]] > cnt[initial[res]]) {
                res = i;
            }
        }
        return initial[res];
    }

    private void bfs(int[][] graph, int i, boolean[] visited) {
        LinkedList<Integer> queue = new LinkedList<>();
        queue.offer(i);
        while (!queue.isEmpty()) {
            int p = queue.poll();
            visited[p] = true;
            for (int t = 0; t < graph.length; t++) {
                if (graph[p][t] != 1) {
                    continue;
                }
                if (!visited[t]) {
                    queue.offer(t);
                }
            }
        }
    }
}
